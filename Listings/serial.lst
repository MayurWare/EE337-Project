C51 COMPILER V9.60.0.0   SERIAL                                                            04/03/2021 16:01:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Objects\serial.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE serial.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\se
                    -rial.lst) TABS(2) OBJECT(.\Objects\serial.obj)

line level    source

   1          #include <at89c5131.h>
   2          
   3          bit tx_complete = 0,rx_complete = 0;       //Bit flags for interrupts
   4          
   5          void uart_init(void)
   6          {
   7   1        TMOD=0x20;                              //Configure Timer 1 in Mode 2
   8   1        TH1=0xF3;                               //Load TH1 to obtain require Baudrate (here 4800Hz) (Refer Serial.p
             -df for calculations)
   9   1        SCON=0x50;           //Configure UART peripheral for 8-bit data transfer 
  10   1        TR1=1;           //Start Timer 1
  11   1        ES=1;          //Enable Serial Interrupt
  12   1        EA=1;          //Enable Global Interrupt
  13   1      }
  14          
  15          
  16          /**********************************************************
  17             transmit_char(<unsigned char ch>): 
  18            Transmits a character using UART
  19          ***********************************************************/  
  20          void transmit_char(unsigned char ch)
  21          {
  22   1        SBUF=ch;        //Load data in SBUF
  23   1        while(!tx_complete);  //Wait for tx_complete flag (interrupt to complete)
  24   1        tx_complete = 0;    //Clear tx_complete flag 
  25   1      }
  26          
  27          
  28          /**********************************************************
  29             transmit_string(<String pointer>): 
  30            Transmit a string using UART
  31          ***********************************************************/  
  32          void transmit_string(unsigned char *s)
  33          {
  34   1        while(*s != 0)
  35   1        {
  36   2            transmit_char(*s++);
  37   2        }
  38   1      }
  39          
  40          
  41          /**********************************************************
  42             receive_char(): 
  43            Receives a character through UART. Returns a 
  44            character.
  45          ***********************************************************/    
  46          unsigned char receive_char(void)
  47          {
  48   1        unsigned char ch = 0;
  49   1        while(!rx_complete);        //Wait for rx_complete(interrupt to complete)
  50   1        rx_complete = 0;
  51   1        ch = SBUF;                  //Read data from SBUF
  52   1        return ch;                  //Return read character
  53   1      }
C51 COMPILER V9.60.0.0   SERIAL                                                            04/03/2021 16:01:01 PAGE 2   

  54          
  55          
  56          /**********************************************************
  57             Serial_ISR(): 
  58            Interrupt service routine for UART interrupt.
  59            Determines whether it is a transmit or receive
  60            interrupt and raise corresponding flag.
  61            Transmit or receive functions (defined above) monitor
  62            for these flags to check if data transfer is done.
  63          ***********************************************************/  
  64          void serial_ISR(void) interrupt 4
  65          {
  66   1          if(TI==1)         //check whether TI is set
  67   1          {   
  68   2            TI = 0;         //Clear TI flag
  69   2            tx_complete = 1;  //Set tx_complete flag indicating interrupt completion
  70   2          }
  71   1          else if(RI==1)      //check whether RI is set
  72   1          {
  73   2            RI = 0;         //Clear RI flag
  74   2            rx_complete = 1;  //Set rx_complete flag indicating interrupt completion
  75   2          }
  76   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     87    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
