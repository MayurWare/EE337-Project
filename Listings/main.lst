C51 COMPILER V9.60.0.0   MAIN                                                              04/08/2021 02:55:38 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*--------------------------------------------EE 337: Microprocessors Laboratory (Spring 2021)------------
             ----------------------------------*/
   2          /*--------------------------------------------Project Name : Obstacle Avoidance Game on Pt-51-------------
             ----------------------------------*/
   3          /*-----------------------------------------------Made By : Mayur Ware, Roll No. : 19D070070---------------
             ----------------------------------*/
   4          
   5          #include <at89c5131.h>
   6          #include "lcd.h"                     //Header file with LCD interfacing functions
   7          #include "serial.c"                  //C file with UART interfacing functions
   8          
   9          unsigned char b0,b1,b2;              //Chars for implementing the linear feedback shift register (LFSR) to
             - generate pseudorandom-ness.
  10          unsigned char check[2];              //Check variables
  11          unsigned char init[3] = {0,1,1};     //To initialize lfsr bits and also to preserve the previous state aft
             -er game restarts
  12          unsigned char str1[17] = "                ";   //str1 to display on Line 1 of LCD
  13          unsigned char str2[17] = "                ";   //str2 to display on Line 2 of LCD
  14          unsigned char store[2] ="  ";        //Store variables 
  15          unsigned int score = 0;              //To update score aafter each second
  16          unsigned int best = 0;               //To keep track of the best score
  17          
  18          //Initializing functions
  19          void msdelay(unsigned int);         //Takes integer value as an input and generates corresponding delay in mil
             -li seconds
  20          void lfsr_func(void);               //Implements the linear feedback shift register (LFSR) to generate pse
             -udorandom-ness.
  21          void collision(void);               //Checks if Dinosaur and obstacle are collided 
  22          void reorder(void);                 //Sends sequence of new characters
  23          void print_data(void);              //Prints the updates strings
  24          void main(void);                    //Main 
  25          void get_char(void);                //Gets character from UART
  26          
  27          /*------------------------ms delay function-----------------------------*/
  28          void msdelay(unsigned int time)
  29          {
  30   1        int i,j;
  31   1        for(i=0;i<time;i++)
  32   1        { get_char();
  33   2          collision();
  34   2          for(j=0;j<382;j++);
  35   2        }
  36   1      }
  37          /*--------------------------lfsr_func function---------------------------*/
  38          void lfsr_func(void)
  39          { unsigned char buff;               //To temporarily store the value of b2
  40   1        buff = b2;
  41   1        b2 = b2^b0;                       //b2 = b2 xor b0
  42   1        init[2] = b2;                     //Preserve value of b2
  43   1        b0 = b1;
  44   1        init[0] = b0;                     //Preserve value of b0
  45   1        b1 = buff;
  46   1        init[1] = b1;                     //Preserve value of b1
  47   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              04/08/2021 02:55:38 PAGE 2   

  48          /*--------------------------collision function---------------------------*/
  49          void collision(void)
  50          { if(score>best)                    //Check if score>best and then assign it to best
  51   1            {
  52   2              best = score;            
  53   2            }
  54   1        if(check[0] == str1[2] | check[1] == str2[2])   //If check variables and characters at column 3 of string
             -s
  55   1        { P1 = 0xA0;                                    //Change LED status
  56   2          lcd_cmd(0x01);                                //Clear LCD
  57   2          lcd_cmd(0x80);
  58   2          lcd_write_string("Score :");                  //Send "Score :" 
  59   2          msdelay(4);
  60   2          
  61   2          lcd_cmd(0x8C);
  62   2          int_to_string(score);                         //Send the score to LCD
  63   2          msdelay(4);
  64   2        
  65   2          lcd_cmd(0xC0);
  66   2          lcd_write_string("High Score :");             //Send "High Score :" 
  67   2          msdelay(4);
  68   2          
  69   2          lcd_cmd(0xCD);
  70   2          int_to_string(best);                          //Send the best score to LCD
  71   2          msdelay(3000);                                //3 Second delay
  72   2          main();                                       //Jump to main();
  73   2        }
  74   1      } 
  75          /*--------------------------shuffle function---------------------------*/
  76          void shuffle(unsigned char b0, unsigned char b1, unsigned char b2)
  77          {
  78   1        if(b0==1 & b1==0 & b2==1)                       //Case 1
  79   1        {
  80   2          str1[15]=' ';
  81   2          str2[15]=' ';
  82   2          print_data();   
  83   2          str1[15]='*';   
  84   2          str2[15]=' ';
  85   2          print_data();     
  86   2          str1[15]='*'; 
  87   2          str2[15]=' '; 
  88   2          print_data(); 
  89   2        }
  90   1        else if(b0==0 & b1==1 & b2==0)                  //Case 2
  91   1        {
  92   2          str1[15]=' ';
  93   2          str2[15]=' ';
  94   2          print_data(); 
  95   2          str1[15]=' ';
  96   2          str2[15]='*';
  97   2          print_data(); 
  98   2          str1[15]=' ';
  99   2          str2[15]='*';
 100   2          print_data();     
 101   2        }
 102   1        else if(b0==0 & b1==0 & b2==1)                  //Case 3
 103   1        {
 104   2          str1[15]=' ';
 105   2          str2[15]=' ';
 106   2          print_data(); 
 107   2          str1[15]='*';
 108   2          str2[15]=' ';
C51 COMPILER V9.60.0.0   MAIN                                                              04/08/2021 02:55:38 PAGE 3   

 109   2          print_data(); 
 110   2          str1[15]=' ';
 111   2          str2[15]=' ';
 112   2        }
 113   1        else if(b0==1 & b1==0 & b2==0)                   //Case 4
 114   1        {
 115   2          str1[15]=' ';
 116   2          str2[15]=' ';
 117   2          print_data(); 
 118   2          str1[15]=' ';
 119   2          str2[15]=' ';
 120   2          print_data(); 
 121   2          str1[15]=' ';
 122   2          str2[15]='*';
 123   2          print_data(); 
 124   2        }
 125   1        else if(b0==1 & b1==1 & b2==0)                   //Case 5
 126   1        {
 127   2          str1[15]=' ';
 128   2          str2[15]=' ';
 129   2          print_data(); 
 130   2          str1[15]=' ';
 131   2          str2[15]='*';
 132   2          print_data(); 
 133   2          str1[15]=' ';
 134   2          str2[15]=' ';
 135   2          print_data();     
 136   2        }
 137   1        else if(b0==1 & b1==1 & b2==1)                   //Case 6
 138   1        {
 139   2          str1[15]=' ';
 140   2          str2[15]=' ';
 141   2          print_data(); 
 142   2          str1[15]=' ';
 143   2          str2[15]=' ';
 144   2          print_data(); 
 145   2          str1[15]='*';
 146   2          str2[15]=' ';
 147   2          print_data(); 
 148   2        }
 149   1        else if(b0==0 & b1==1 & b2==1)                   //Case 7
 150   1        {
 151   2          str1[15]=' ';
 152   2          str2[15]=' ';
 153   2          print_data(); 
 154   2          str1[15]=' ';
 155   2          str2[15]=' ';
 156   2          print_data(); 
 157   2          str1[15]=' ';
 158   2          str2[15]=' ';
 159   2          print_data(); 
 160   2        }
 161   1      }
 162          /*--------------------------reorder function---------------------------*/
 163          void reorder(void)
 164          { unsigned int i = 0;                             
 165   1        store[0] = str1[3];                             //Load store[0] into str1[3]
 166   1        store[1] = str2[3];                             //Load store[1] into str2[3]
 167   1        for ( i=0;i < 15; i++)                          //Loop into strings
 168   1        {if (str1[i+1] == 'D'){                         //If 'D' appears, send previous character
 169   3              str1[i] = str1[i+2];}
 170   2         else{str1[i] = str1[i+1];}                     //Shift each character of str1 left by 1
C51 COMPILER V9.60.0.0   MAIN                                                              04/08/2021 02:55:38 PAGE 4   

 171   2       
 172   2         if (str2[i+1] == 'D'){                         //If 'D' appears, send previous character
 173   3             str2[i] = str2[i+2];} 
 174   2         else{str2[i] = str2[i+1];}                     //Shift each character of str2 left by 1
 175   2        }
 176   1        collision();                                    //Check if collision occurred
 177   1      }
 178          /*--------------------------print_data function---------------------------*/
 179          void print_data(void)
 180          { P1 = 0xF0;                                      //LEDs ON
 181   1        //Send both strings to LCD
 182   1        lcd_cmd(0x80);
 183   1        lcd_write_string(str1);
 184   1        lcd_cmd(0xC0);
 185   1        lcd_write_string(str2);
 186   1        msdelay(1000);                                 //Delay of 1s
 187   1        score++;                                       //Increment Score
 188   1        P1 = 0x00;                                     //LEDs OFF
 189   1        //Send both strings to LCD
 190   1        lcd_cmd(0x80);
 191   1        lcd_write_string(str1);
 192   1        lcd_cmd(0xC0);
 193   1        lcd_write_string(str2);
 194   1        collision();                                   //Check if collision occurred
 195   1        reorder();                                     //Jump to reorder();
 196   1      }
 197          /*--------------------------get_char function---------------------------*/
 198          void get_char(void)
 199          {
 200   1           //Receive a character ch from UART
 201   1            switch(ch)
 202   1            {
 203   2              case 'q':                                //Case for key 'q' pressed to move 'D' up          
 204   2                       str1[2] = 'D';                  //Send 'D' on Line 1 Column 3
 205   2                       str2[2]= store[1];              //Store current value of str2[2] into store[1]
 206   2                       //Update CHeck variables
 207   2                       check[0]='*';
 208   2                       check[1]='&';
 209   2                       break;
 210   2              
 211   2              case 'a':                                //Case for key 'a' pressed to move 'D' down      
 212   2                       str1[2] = store[0];             //Store current value of str1[2] into store[0]
 213   2                       str2[2]= 'D';                   //Send 'D' on Line 2 Column 3
 214   2                       //Update CHeck variables
 215   2                       check[0]='&';
 216   2                       check[1]='*';
 217   2                       break;   
 218   2              default:     break;   
 219   2            }
 220   1      }
 221          /*--------------------------main function---------------------------*/
 222          void main(void)
 223          { unsigned int i = 0;
 224   1        //Loop through both strings and make them blank
 225   1        for (i=0; i < 15; i++) 
 226   1        {str1[i] = ' ';
 227   2        str2[i] = ' ';}
 228   1        //Initialize Char variables
 229   1        check[0] = '#';
 230   1        check[1] = '#';
 231   1        //Stop printing instruction
 232   1        str1[16] = '\0';
C51 COMPILER V9.60.0.0   MAIN                                                              04/08/2021 02:55:38 PAGE 5   

 233   1        str2[16] = '\0';
 234   1        //Initialize Store variables
 235   1        store[0] = ' ';
 236   1        store[1] = ' ';
 237   1        //Start 'D' at Line 1 Column 3
 238   1        ch = 'q';
 239   1        //Set Score to 0
 240   1        score = 0;
 241   1        //Load the preserved states into b0, b1 and b2
 242   1        b0 = init[0];
 243   1        b1 = init[1];
 244   1        b2 = init[2];
 245   1        //Initialize port P1 for output from P1.7-P1.4
 246   1        P1 = 0xF0;
 247   1        //Call initialization functions
 248   1        lcd_init();      //Call LCD function
 249   1        uart_init();     //Initialize UART
 250   1        //Send Game instructions for player
 251   1        transmit_string("Welcome to Obstacle Avoidance Game!\r\n");
 252   1        transmit_string("Press 'Q' and 'A' keys to move dinosaur UP and DOWN to avoid obstacles\r\n");
 253   1        transmit_string("The game will end once Dinosaur and obsacle will collide\r\n");
 254   1        transmit_string("All the Best!\r\n"); 
 255   1        //Start
 256   1        while(1)
 257   1        {  
 258   2          lfsr_func();
 259   2          shuffle(b0, b1, b2);
 260   2        }
 261   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1261    ----
   CONSTANT SIZE    =    207    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
